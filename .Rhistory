to_date <- input$todate
})
#  finalInput <- reactive({
#    return(finalInput())
#  })
output$correlation_plot_view <- renderPlot({
correlation_plot(functions_input[[4]])
})
}
shinyApp(ui = ui, server = server)
functions_input <- stock_input(tickersList$Symbol[1:100], fromdate, todate)
functions_input <- stock_input(tickersList$Symbol[1:100], from_date, to_date)
tickersList <- stockSymbols()
tickers <- c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX")
from_date <- "2018-08-01"
to_date <- "2020-08-01"
functions_input <- stock_input(tickersList$Symbol[1:100], from_date, to_date)
ui <- fluidPage(
headerPanel('Stockify - a stock portofolio optimizing app'),
sidebarPanel(
numericInput("rfrate", "Risk free rate: ", 0.03,
min = 0,
max = 1,
step = 0.001),
#    textInput("tickers", "Ticker Name: ",
#              value = c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX"),
#              placeholder = "AAPL, XOM...."),
dateInput("fromdate", "Date From: ",
"2005-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
),
dateInput("todate", "Date To: ",
"2010-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
),
actionButton("refresh", "Refresh page")
#  dateRangeInput("tickerrange", "Ticker Range: ", # Possible alternative to "date-to" and "date-from"
#                 start = "2005-08-01",
#                 end = "2010-08-01",
#                 min = "2005-08-01",
#                 max = "2020-10-01",
#                 format = "yyyy/mm/dd",
#                 separator = "to"),
),
mainPanel(
#verbatimTextOutput("opt_sharpe"),
#verbatimTextOutput("opt_volume"),
#textOutput("rfratetext")
#plotOutput("returns_hist"),
plotOutput("correlation_plot_view", width = "100%", height = "400px"),
#plotOutput("stock_price_history"),
#plotOutput("efficency_frontier"),
#plotOutput("compare_SP500")
)
)
server <- function(input, output) { # The backend
# The idea here is to input the inputs to the functions in BAN400-Functions.R
# and then make the plots using the functions.
# However it does not work yet (fÃ¥r ikke til og hente ut funksjonene med subsetting
# ala [[4]] som du gjorde i run-file)
dataInput <- reactive({
# input 1 = tickers
# input 2 = stock_prices
# input 3 = returns_matrix
# input 4 = stock_correlation
# input 5 = stock_return with date
# input 6 = stock_covariance
# input 7 = portfolio weigths
risk_free_rate <- input$rfrate
#    tickers <- input$tickers
from_date <- input$fromdate
to_date <- input$todate
})
#  finalInput <- reactive({
#    return(finalInput())
#  })
output$correlation_plot_view <- renderPlot({
correlation_plot(functions_input[[4]])
})
}
shinyApp(ui = ui, server = server)
runApp()
### This will only run once ###
library(shiny)
source("Ban400-Functions.R")
library(tidyquant)
library(tidyverse)
library(dplyr)
library(corrplot)
library(nloptr)
library(gtools)
library(skimr)
library(svDialogs)
library(TTR)
tickersList <- stockSymbols()
tickers <- c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX")
from_date <- "2018-08-01"
to_date <- "2020-08-01"
functions_input <- stock_input(tickersList$Symbol[1:100], from_date, to_date)
##############################
ui <- fluidPage(
headerPanel('Stockify - a stock portofolio optimizing app'),
sidebarPanel(
numericInput("rfrate", "Risk free rate: ", 0.03,
min = 0,
max = 1,
step = 0.001),
#    textInput("tickers", "Ticker Name: ",
#              value = c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX"),
#              placeholder = "AAPL, XOM...."),
dateInput("fromdate", "Date From: ",
"2005-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
),
dateInput("todate", "Date To: ",
"2010-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
),
actionButton("refresh", "Refresh page")
#  dateRangeInput("tickerrange", "Ticker Range: ", # Possible alternative to "date-to" and "date-from"
#                 start = "2005-08-01",
#                 end = "2010-08-01",
#                 min = "2005-08-01",
#                 max = "2020-10-01",
#                 format = "yyyy/mm/dd",
#                 separator = "to"),
),
mainPanel(
#verbatimTextOutput("opt_sharpe"),
#verbatimTextOutput("opt_volume"),
#textOutput("rfratetext")
#plotOutput("returns_hist"),
plotOutput("correlation_plot_view", width = "100%", height = "400px"),
#plotOutput("stock_price_history"),
#plotOutput("efficency_frontier"),
#plotOutput("compare_SP500")
)
)
server <- function(input, output) { # The backend
# The idea here is to input the inputs to the functions in BAN400-Functions.R
# and then make the plots using the functions.
# However it does not work yet (fÃ¥r ikke til og hente ut funksjonene med subsetting
# ala [[4]] som du gjorde i run-file)
dataInput <- reactive({
# input 1 = tickers
# input 2 = stock_prices
# input 3 = returns_matrix
# input 4 = stock_correlation
# input 5 = stock_return with date
# input 6 = stock_covariance
# input 7 = portfolio weigths
risk_free_rate <- input$rfrate
#    tickers <- input$tickers
from_date <- input$fromdate
to_date <- input$todate
})
#  finalInput <- reactive({
#    return(finalInput())
#  })
output$correlation_plot_view <- renderPlot({
correlation_plot(functions_input[[4]])
})
}
shinyApp(ui = ui, server = server)
tickers <- c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX")
from_date <- "2018-08-01"
to_date <- "2020-08-01"
functions_input <- stock_input(tickersList$Symbol[1:100], from_date, to_date)
correlation_plot(input[[4]])
from_date <- "2018-08-01"
to_date <- "2020-08-01"
functions_input <- stock_input(tickersList$Symbol[1:100], from_date, to_date)
correlation_plot(input[[4]])
tickers <- c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX")
from_date <- "2018-08-01"
to_date <- "2020-08-01"
functions_input <- stock_input(tickersList$Symbol[1:100], from_date, to_date)
correlation_plot(input[[4]])
correlation_plot(fuctions_input[[4]])
correlation_plot(functions_input[[4]])
library(shiny)
source("Ban400-Functions.R")
library(tidyquant)
library(tidyverse)
library(dplyr)
library(corrplot)
library(nloptr)
library(gtools)
library(skimr)
library(svDialogs)
library(TTR)
tickersList <- stockSymbols()
tickers <- c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX")
from_date <- "2018-08-01"
to_date <- "2020-08-01"
functions_input <- stock_input(tickersList$Symbol[1:100], from_date, to_date)
correlation_plot(functions_input[[4]])
functions_input
functions_input
correlation_plot(functions_input[[4]])
opt_sharpe <- stock_opt_sharpe(input[[1]],input[[7]],input[[3]],input[[6]])
opt_sharpe <- stock_opt_sharpe(functions_input[[1]],functions_input[[7]],functions_input[[3]],functions_input[[6]])
ui <- fluidPage(
headerPanel('Stockify - a stock portofolio optimizing app'),
sidebarPanel(
numericInput("rfrate", "Risk free rate: ", 0.03,
min = 0,
max = 1,
step = 0.001),
dateInput("fromdate", "Date From: ",
"2005-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
),
dateInput("todate", "Date To: ",
"2010-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
)),
mainPanel(
plotOutput(inputId = "vcorr_plot"))
)
library(shiny)
library(tidyquant)
library(tidyverse)
library(dplyr)
library(corrplot)
library(nloptr)
library(gtools)
library(skimr)
library(svDialogs)
library(TTR)
ui <- fluidPage(
headerPanel('Stockify - a stock portofolio optimizing app'),
sidebarPanel(
numericInput("rfrate", "Risk free rate: ", 0.03,
min = 0,
max = 1,
step = 0.001),
dateInput("fromdate", "Date From: ",
"2005-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
),
dateInput("todate", "Date To: ",
"2010-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
)),
mainPanel(
plotOutput(inputId = "vcorr_plot"))
)
ui <- fluidPage(
headerPanel('Stockify - a stock portofolio optimizing app'),
sidebarPanel(
numericInput("rfrate", "Risk free rate: ", 0.03,
min = 0,
max = 1,
step = 0.001),
dateInput("fromdate", "Date From: ",
"2005-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
),
dateInput("todate", "Date To: ",
"2010-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
)),
mainPanel(
plotOutput("vcorr_plot"))
)
server <- function(input, output) {
rfrate2 <- reactive({
risk_free_rate <- input$rfrate
})
functions_input <- stock_input(tickersList$Symbol[1:100],from ,to_date)
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}  # Make the server functions
library(markdown)
shinyApp(ui = ui, server = server) # Combine it into the app
tickersList <- stockSymbols()
risk_free_rate <- 0.02
tickers <- c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX")
from_date <- "2018-08-01"
to_date <- "2020-08-01"
functions_input <- stock_input(tickersList$Symbol[1:100],from_date ,to_date)
functions_input
#finds the portfolio with the higest sharpe ratio
opt_sharpe <- stock_opt_sharpe(functions_input[[1]],functions_input[[7]],functions_input[[3]],functions_input[[6]])
#finds the portfolio with the higest sharpe ratio
opt_sharpe <- stock_opt_sharpe(functions_input[[1]],functions_input[[7]],functions_input[[3]],functions_input[[6]])
opt_sharpe[[1]]
#finds the portfolio with the higest sharpe ratio
opt_sharpe <- stock_opt_sharpe(functions_input[[1]],functions_input[[7]],functions_input[[3]],functions_input[[6]])
library(shiny)
library(tidyquant)
library(tidyverse)
library(dplyr)
library(corrplot)
library(nloptr)
library(gtools)
library(skimr)
library(svDialogs)
library(TTR)
library(markdown)
source("Ban400-Functions.R")
risk_free_rate <- 0.03
tickersList <- stockSymbols()
tickers <- c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX")
from_date <- "2018-08-01"
to_date <- "2020-08-01"
functions_input <- stock_input(tickersList$Symbol[1:100],from_date ,to_date)
functions_input
#finds the portfolio with the higest sharpe ratio
opt_sharpe <- stock_opt_sharpe(functions_input[[1]],functions_input[[7]],functions_input[[3]],functions_input[[6]])
opt_sharpe[[1]]
correlation_plot(functions_input[[4]])
ui <- fluidPage(
headerPanel('Stockify - a stock portofolio optimizing app'),
sidebarPanel(
numericInput("rfrate", "Risk free rate: ", 0.03,
min = 0,
max = 1,
step = 0.001),
dateInput("fromdate", "Date From: ",
"2005-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
),
dateInput("todate", "Date To: ",
"2010-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
)),
mainPanel(
plotOutput("vcorr_plot"))
)
server <- function(input, output) {
rfrate2 <- reactive({
risk_free_rate <- input$rfrate
})
functions_input <- reactive({
functions_input <- stock_input(tickersList$Symbol[1:100],from_date ,to_date)
})
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
server <- function(input, output) {
rfrate2 <- reactive({
risk_free_rate <- input$rfrate
})
#  functions_input <- reactive({
#    functions_input <- stock_input(tickersList$Symbol[1:100],from_date ,to_date)
#  })
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
server <- function(input, output) {
rfrate2 <- reactive({
risk_free_rate <- input$rfrate
})
functions_input <- reactive({
functions_input <- stock_input(tickersList$Symbol[1:100],fromdate ,todate)
})
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
server <- function(input, output) {
rfrate2 <- reactive({
risk_free_rate <- input$rfrate
})
functions_input <- stock_input(tickersList$Symbol[1:100],fromdate ,todate)
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
server <- function(input, output) {
rfrate2 <- reactive({
risk_free_rate <- input$rfrate
})
#  functions_input <- stock_input(tickersList$Symbol[1:100],fromdate ,todate)
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
ui <- fluidPage(
headerPanel('Stockify - a stock portofolio optimizing app'),
sidebarPanel(
numericInput("rfrate", "Risk free rate: ", 0.03,
min = 0,
max = 1,
step = 0.001),
dateInput("fromdate", "Date From: ",
"2005-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
),
dateInput("todate", "Date To: ",
"2010-08-01",
min = "2005-08-01",
max = "2020-10-01",
format = "yyyy/mm/dd"
)),
mainPanel(
plotOutput("vcorr_plot"))
)
server <- function(input, output) {
rfrate2 <- reactive({
risk_free_rate <- input$rfrate
})
#  functions_input <- stock_input(tickersList$Symbol[1:100],fromdate ,todate)
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
server <- function(input, output) {
#  functions_input <- stock_input(tickersList$Symbol[1:100],fromdate ,todate)
functions_input <- reactive({
stock_input(tickersList$Symbol[1:100],fromdate ,todate)
})
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
functions_input <- reactive({
stock_input(tickersList$Symbol[1:100],fromdate ,todate)
})
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
server <- function(input, output) {
#  functions_input <- stock_input(tickersList$Symbol[1:100],fromdate ,todate)
functions_input <- reactive({
stock_input(tickersList$Symbol[1:100],fromdate ,todate)
})
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
library(shiny)
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
server <- function(input, output) {
#  functions_input <- stock_input(tickersList$Symbol[1:100],fromdate ,todate)
functions_input <- reactive({
stock_input(tickersList$Symbol[1:100],fromdate ,todate)
})
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
functions_input <- stock_input(tickersList$Symbol[1:100],from_date ,to_date)
functions_input
View(functions_input)
server <- function(input, output) {
#  functions_input <- stock_input(tickersList$Symbol[1:100],fromdate ,todate)
dataInput <- reactive({
stock_input(tickersList$Symbol[1:100], fromdate, todate)
})
output$vcorr_plot <- renderPlot({
correlation_plot(functions_input[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
server <- function(input, output) {
#  functions_input <- stock_input(tickersList$Symbol[1:100],fromdate ,todate)
dataInput <- reactive({
stock_input(tickersList$Symbol[1:100], fromdate, todate)
})
output$vcorr_plot <- renderPlot({
correlation_plot(dataInput[[4]])})
}
shinyApp(ui = ui, server = server) # Combine it into the app
library(shiny)
library(tidyquant)
library(tidyverse)
library(dplyr)
library(corrplot)
library(nloptr)
library(gtools)
library(skimr)
library(svDialogs)
library(TTR)
library(markdown)
source("Ban400-Functions.R")
risk_free_rate <- 0.03
tickersList <- stockSymbols()
tickers <- c("AAPL", "XOM", "BAC", "PFE", "NEE", "RTX")
from_date <- "2018-08-01"
to_date <- "2020-08-01"
functions_input <- stock_input(tickersList$Symbol[1:100],from_date ,to_date)
